# Specifies the version of the Docker Compose file format.
version: '3.8'

# Defines the services that make up your application.
services:
  # PostgreSQL database service
  db:
    image: postgres:16
    container_name: postgres-db
    restart: always
    environment:
      # Sets the default user, password, and database name.
      # Uses environment variables from a .env file if they exist, otherwise uses defaults.
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-my_password}
      POSTGRES_DB: ${POSTGRES_DB:-mydb}
    volumes:
      # Persists PostgreSQL data using a named volume.
      - pgdata:/var/lib/postgresql/data
      # Runs an initialization script on startup.
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      # Command to check if the database is ready to accept connections.
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-mydb}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama service for running large language models
  ollama:
    image: ollama/ollama
    container_name: ollama-service
    restart: always
    volumes:
      # Persists Ollama models and data using a named volume.
      - ollama_data:/root/.ollama

  # Main application service
  app:
    build: ./app
    container_name: aisavvy-api
    restart: always
    ports:
      # Maps port 8000 on the host to port 8000 in the container.
      - "8000:8000"
    volumes:
      # Mounts a local directory for application data.
      - ./app_data:/app/data
    environment:
      DB_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:-mydb}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-my_password}
      OLLAMA_HOST: http://ollama:11434
      LLM_MODEL: llama3
    depends_on:
      # Ensures 'db' is healthy and 'ollama' has started before this service starts.
      db:
        condition: service_healthy
      ollama:
        condition: service_started

  # User interface service (e.g., Streamlit or Gradio)
  ui:
    build: ./ui
    container_name: aisavvy-ui
    restart: always
    ports:
      # Maps port 8501 on the host to port 8501 in the container.
      - "8501:8501"
    depends_on:
      # Ensures the 'app' service is started before this service starts.
      - app

  # Telegram bot service
  telegram-bot:
    build: ./telegram_bot
    container_name: aisavvy-telegram-bot
    restart: always
    environment:
      # Passes the Telegram bot token and API URL as environment variables.
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_URL: http://app:8000/query
    depends_on:
      # Ensures the 'app' service is started before this service starts.
      - app

# Defines the named volumes used by the services.
volumes:
  pgdata:
  ollama_data:
