version: '3.8'

# This file orchestrates the four core services of the AISavvy platform,
# now optimized to use the Google Gemini API instead of a local LLM.
services:

  # 1. The PostgreSQL Database Service (unchanged)
  db:
    image: postgres:16
    container_name: postgres-db
    restart: always
    environment:
      # Uses the SUPERUSER credentials for database creation and initialization
      POSTGRES_USER: ${POSTGRES_USER_SUPER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_SUPER}
      POSTGRES_DB: mydb
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_SUPER} -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2. The Backend API (Now using Gemini)
  app:
    build: ./app
    container_name: aisavvy-api
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./app_data:/app/data
    environment:
      # Passes the read-only user credentials and the new Gemini API key
      POSTGRES_USER: ${POSTGRES_USER_APP}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_APP}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      DB_HOST: db
      POSTGRES_DB: mydb
    depends_on:
      db:
        condition: service_healthy

  # 3. The Streamlit Web Interface (unchanged)
  ui:
    build: ./ui
    container_name: aisavvy-ui
    restart: always
    ports:
      - "8501:8501"
    depends_on:
      app:
        condition: service_healty

  # 4. The Telegram Bot Service (unchanged)
  telegram-bot:
    build: ./telegram_bot
    container_name: aisavvy-telegram-bot
    restart: always
    environment:
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_URL: http://app:8000/query
    depends_on:
      app:
        condition: service_healthy

volumes:
  pgdata: